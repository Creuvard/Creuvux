/*
 * Author: Bourdou Sylvain
 * Mail  : sylvain.bourdou@colerix.org
 *
 * This program is the creuvux daemon.  It listens for connections from clients,
 * and performs authentication, executes use commands, and forwards
 * information to/from the application to the user client over an encrypted
 * connection.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include <errno.h>
#include <pwd.h>
#include <libgen.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <sys/wait.h>

#include <netinet/in.h>
#include <arpa/inet.h>

#include <pthread.h>

#include <openssl/crypto.h>
#include <openssl/x509.h>
#include <openssl/pem.h>
#include <openssl/ssl.h>
#include <openssl/err.h>

/*
 * XML stuff
 */
#include <libxml/tree.h>
#include <libxml/parserInternals.h>
#include <libxml/xpath.h>
#include <libxslt/xslt.h>
#include <libxslt/transform.h>
#include <libxslt/xsltInternals.h>
#include <libxslt/xsltutils.h>

/*
 * Glib/Gtk+-2.0
 */
#include <gtk/gtk.h>
#include <glib/gprintf.h>


#include "creuvard.h"
#include "client_conf.h"
#include "help.h"
#include "sync.h"
#include "xml_listing.h"
#include "get.h"
#include "creuvuxhttpd.h"
#include "put.h"
#include "msg.h"
#include "catls.h"
#include "thread.h"


#define debug() fprintf(stderr, "DEBUG: fonction:%s() file:%s line:%d\n", __FUNCTION__, __FILE__, __LINE__);

/* Client configuration options. */
ClientOptions options;


/*
 * usage()
 */
static  void
usage (const char *str)
{
  if (str)
    printf ("\n%s\n", str);

  fprintf (stdout, "%s\n", "Usage : creuvuxd [-hv] [-f config_file] [-c command arg]" );
}

/*
 * read_client_conf(const char *filename)
 * -> Read configuration file and set options.
 */
static int 
read_client_conf(const char *filename)
{
  FILE *fd = NULL;
  char buf[SIZE];
  char buffer[SIZE];
  int nb_sep = 0;
  int i;
  char **param = NULL;
  
  fd = crv_fopen(filename, "r");
  if (fd == NULL) {
	fprintf( stderr, "%s\n", "read_client_conf(): Err[001] crv_fopen() failed");
	return (-1);
  }
  
  while (fgets(buf, sizeof(buf), fd) != NULL)
  {
	buf[strcspn(buf, "\n")] = '\0';
	/* Check if first charactere on each line
       * is not: space
	   *		 # (comment)
       *		  \n 
       * and string =" is present
       */
	if ((buf[0] != '\n') && (buf[0] != '#') && (buf[0] != ' ') && strstr (buf, "=\"")) {
		for (i = 0; buf[i]; i++) 
		{
		  if (buf[i] == '"')
			nb_sep++;
	    }

	  if (nb_sep != 2) {
	    fprintf (stderr, "%s%s\n", " A \" is missing \n line: ", buf);
	    break;
	  }
	  
	  /* cut buf in 2 string. */
	  param = crv_cut (buf, "\"");

	  /* For fisrt string we replace the "=" of "CREUVUX_OPT=" with "CREUVUX_OPT\0" */
	  for (i = 0; param[0][i]; i++)
	    {
	      if (param[0][i] == '=')
		param[0][i] = '\0';
	    }

	  if (!strncmp( "CREUVUX_PATH", param[0], strlen("CREUVUX_PATH"))) {
		/*crv_free( options.path);*/
		options.path = crv_strdup(param[1]);
		(void)crv_strncpy(buffer, options.path, sizeof(buffer));
		(void)crv_strncat(buffer, "listing/", sizeof(buffer));
		options.listing_directory = crv_strdup(buffer);
		memset(buffer, 0, sizeof(buffer));
	  }

	  if (!strncmp( "CREUVUX_SEC", param[0], strlen("CREUVUX_SEC")))
	  {
		if (!strncmp( "no", param[1], strlen("no")))
		  options.sec = -1;
		else if (!strncmp( "yes", param[1], strlen("yes")))
		  options.sec = 1;
		else {
		  fprintf(stderr, "%s\n", "Please check CREUVUX_SEC=\"yes|no\"");
		  break;
		}
	  }

	  if (!strncmp( "CREUVUX_DEBUG", param[0], strlen("CREUVUX_DEBUG")))
	  {
		if (!strncmp( "no", param[1], strlen("no")))
		  options.debug = -1;
		else if (!strncmp( "yes", param[1], strlen("yes")))
		  options.debug = 1;
		else {
		  fprintf(stderr, "%s\n", "Please check CREUVUX_DEBUG=\"yes|no\"");
		  break;
		}
	  }

	  if (!strncmp( "CREUVUX_PWD", param[0], strlen("CREUVUX_PWD")))
		options.passphrase = crv_strdup(param[1]);

	  if (!strncmp( "CREUVUX_IPv", param[0], strlen("CREUVUX_IPv")))
	  {
		if (!strncmp( "4", param[1], strlen("4")))
		  options.address_family = AF_INET;
		else if (!strncmp( "6", param[1], strlen("6")))
		  options.address_family = AF_INET6;
		else {
		  fprintf(stderr, "%s\n", "Please check CREUVUX_IPv=\"4|6\"");
		  break;
		}
	  }
	  
	  if (!strncmp( "CREUVUX_DATA", param[0], strlen("CREUVUX_DATA")))
		options.download_directory = crv_strdup(param[1]);

	  if (!strncmp( "CREUVUX_SRV", param[0], strlen("CREUVUX_SRV")))
		options.srv = crv_strdup(param[1]);

		if (!crv_strncmp( "CREUVUX_COMPRESSION", param[0]))
	  {
			if (!strncmp( "no", param[1], strlen("no")))
				options.compression = -1;
			else if (!strncmp( "yes", param[1], strlen("yes")))
				options.compression = 1;
			else {
				fprintf(stderr, "%s\n", "Please check CREUVUX_COMPRESSION=\"yes|no\"");
				break;
			}
	  }
	  
	  /*******
	   * GUI *
	   * *****/

	  if (!strncmp( "CREUVUX_GUI", param[0], strlen(param[0]))) {
		if (!strncmp( "no", param[1], strlen("no")))
		  options.gui = 0;
		else if (!strncmp( "yes", param[1], strlen("yes")))
		  options.gui = 1;
		else {
		  fprintf(stderr, "%s\n", "Please check CREUVUX_GUI=\"yes|no\"");
		  break;
		}
	  }

	  
	  if (!strncmp( "CREUVUX_GUI_ADDR", param[0], strlen("CREUVUX_GUI_ADDR")) 
		  && (options.gui == 1) )
		options.gui_addr = crv_strdup(param[1]);

	  if (!strncmp( "CREUVUX_GUI_PORT", param[0], strlen("CREUVUX_GUI_PORT")) 
		  && (options.gui == 1) )
	  {
		long lval = 0;
		char *ep;
		errno = 0;
		lval = strtol(param[1], &ep, 10);
		if (buf[0] == '\0' || *ep != '\0') {
		  fprintf(stderr, "%s%s%s\n", "Check CREUVUX_GUI_PORT option, \"", param[1], "\" is not a number");
		  break;
		}
		if ((errno == ERANGE && (lval == LONG_MAX || lval == LONG_MIN)) ||
			(lval > INT_MAX || lval < INT_MIN)) {
		  fprintf(stderr, "%s%s%s\n", "\"", param[1], "\" is out of range");
		  break;
		}
        options.gui_port = lval;
	  }

	  if (!strncmp( "CREUVUX_GUI_TERM", param[0], strlen("CREUVUX_GUI_TERM")) 
		  && (options.gui == 1) )
	  {
		options.term_exec = crv_strdup(param[1]);
	  }

	  if (!strncmp( "CREUVUX_GUI_BIN", param[0], strlen("CREUVUX_GUI_BIN")) 
		  && (options.gui == 1) )
	  {
		options.crv_exec = crv_strdup(param[1]);
	  }


	  

	  
	  nb_sep = 0;
	  for (i = 0; param[i]; i++)
	    crv_free(param[i]);
	  crv_free(param);
	}
  }
  if (!feof(fd)) {
	fclose(fd);
	return (-1);
  }
  fclose(fd);

  return (0);
}

static void
Free_options(void)
{
	if (options.config != NULL)
    crv_free(options.config);

  if (options.path != NULL)
    crv_free(options.path);

  if (options.passphrase != NULL)
    crv_free(options.passphrase);

  if (options.download_directory != NULL)
    crv_free(options.download_directory);

  if (options.listing_directory != NULL)
    crv_free(options.listing_directory);

  if (options.tmp_directory != NULL)
    crv_free(options.tmp_directory);

  if (options.srv != NULL)
    crv_free(options.srv);

  if (options.gui_addr != NULL)
    crv_free(options.gui_addr);

  if (options.term_exec != NULL)
    crv_free(options.term_exec);

  if (options.crv_exec != NULL)
    crv_free(options.crv_exec);
}

/* DEBUT DE LA MODIFICATION POUR GCREUVUX */


/*
 * Element a afficher
 */
int Id;
char *Size;
char *Title;
char **genre;
char *cat;
int num_genre;
int print_flag;
char *choice_in_list;
int download_this_on;
char *info_title;
char *info_cat;
char *info_comment;
char *info_size;
char *info;

/*
 * Divers Flag
 */
int num;
int size_ok;
int title_ok;
int genre_ok;
int comment_ok;





/*
 * La liste des icones se trouve dans le repertoire
 * /usr/local/include/gtk-2.0/gtk/gtkstock.h
 */

enum {
    N,
    P,
		Q,
    N_COLUMN
};

static GtkTreeStore *pTreeStore;
static GtkWidget		*pWindow;
static GtkWidget		*pTreeView;
static GtkWidget		*pStatusBar;
static GtkWidget		*List_HBox;
static GtkWidget		*ListBox;
static GtkWidget		*pNotebook;
static GtkWidget		*download_tab;
static GtkTreeStore *download_tree;
static GtkWidget		*download_treeview;

static GtkTreeStore *load_tree;
static GtkWidget		*load_view;

/*
 * File descriptor for WebUI information file.
 */
FILE *info_fd;

static void 
cb_sax_start_document( void *user_data)
{
}

static void 
cb_sax_end_document( void *user_data)
{
}


static void 
cb_sax_start_element(void *user_data, const xmlChar * name, const xmlChar ** attributes)
{
	if (!crv_strncmp(name, "file")) {
		Id = -1;
		Size = NULL;
		cat = NULL;
		Title = NULL;
	}

	if (!crv_strncmp(name, "size"))
		size_ok = 1;
	if (!crv_strncmp(name, "title")) {
	  title_ok = 1;  
	  num++;
	}
	if (!crv_strncmp(name, "genre"))
		genre_ok = 1;
		
	if (!crv_strncmp(name, "comment") && (download_this_on == num-1))
		comment_ok = 1;
}


static void
cb_sax_end_element(void *user_data, const xmlChar * name)
{
	size_ok = 0;

	if (!crv_strncmp(name, "file") && (print_flag == 0)) {
		char *Id_char = NULL;
		GtkTreeIter pIter;
		Id_char = crv_malloc( 30 * sizeof *Id_char);
		snprintf(Id_char, 30, "%d", Id);

		//fprintf(stderr, "RESULTAT -> %s %s %s\n", Id_char, Size, Title);
    
		// Creation de la nouvelle ligne
    if (user_data == NULL) {
			gtk_tree_store_append(pTreeStore, &pIter, NULL);
			gtk_tree_store_set(pTreeStore, &pIter, N, Id_char, P, Title, Q, Size, -1);
		} else 
		if(!crv_strncmp(cat, user_data)) {
			gtk_tree_store_append(pTreeStore, &pIter, NULL);
			gtk_tree_store_set(pTreeStore, &pIter, N, Id_char, P, Title, Q, Size, -1);
		}
		
		Id = -1;
		if (Id_char != NULL)
			crv_free(Id_char);
	}

	if (!crv_strncmp(name, "file") && (download_this_on == num-1)) {
		info_cat = crv_strdup(cat);
		info_size = crv_strdup(Size);
		info_title = crv_strdup(Title);
		if (info != NULL)
			info_comment = crv_strdup(info);
		
		if (info != NULL)
			crv_free(info);
		
	}

}

static void
cb_sax_characters (void *user_data, const xmlChar * ch, int len)
{
	if(size_ok) {
		  int i;
			long lval;
			char *ep;
			char Mo[SIZE];

			memset(Mo, 0, sizeof(Mo));
		  
			for (i = 0; i < len; i++)
				Mo[i] = ch[i];
			Mo[i]='\0';
			
			errno = 0;
			lval = strtol(Mo, &ep, 10);
			
			if (Mo[0] == '\0' || *ep != '\0') {
				fprintf(stderr, "%s%s", Mo, " is not a number");
				return;
			}
			if (lval > 1024*1024) 
				snprintf(Mo, sizeof(Mo), "%ld Mo", lval/(1024*1024));
			else 
				snprintf(Mo, sizeof(Mo), "%ld Ko", lval/1024);
			
			Size = strdup(Mo);
	 }
	if(genre_ok) {
		int exist = -1;
		int i;
		int j;
		char buf[SIZE];
		memset(buf, 0, sizeof(buf));
		for (i = 0; i < len; i++)
				buf[i] = ch[i];
			buf[i]='\0';

		cat = strdup(buf);

		if (num_genre == 0) {
		genre[num_genre] = strdup( buf );
		num_genre++;
	  }
	  for (j=0; genre[j]; j++) {
		if(!crv_strncmp(buf, genre[j]))
		  exist = 1;
		}
		if (exist == -1) {
		  genre[num_genre] = strdup( buf );
		  num_genre++;
		}
		genre_ok = 0;
	}
}

static xmlEntityPtr
cb_sax_get_entity ( void *user_data, const xmlChar *name)
{
	return xmlGetPredefinedEntity (name);
}

static void cb_sax_comment (void *user_data, const xmlChar * ch)
{
}

static void
cb_sax_cdata (void *user_data, const xmlChar * ch, int len)
{
  if(title_ok) {
		int i;
		char name[SIZE];
		for (i = 0; i < len; i++) {
			name[i] = ch[i];
		}
		
		name[i] = '\0';
	
		Id = num - 1;
		Title = strdup(name);

		title_ok = 0;
		memset(name, 0, sizeof(name));
  }

	if(comment_ok)
	{
		info = crv_malloc( 4096 * sizeof *info);
		int i;
		for (i = 0; i < len; i++) {
				info[i]=ch[i];
		}
		info[i]='\0';
	}
}

static void
cb_sax_warning (void *user_data, const char *msg, ...)
{
}

static void
cb_sax_error(void *user_data, const char *msg, ...)
{
}

static void
cb_sax_fatal_error(void *user_data, const char *msg, ...)
{
}

static int
Sax_parse_list (const char *user_data)
{
	xmlParserCtxtPtr ctxt = NULL;
	xmlSAXHandler *sax = NULL;

	sax = malloc(sizeof *sax);
	
	memset(sax, 0, sizeof *sax);

	sax->getEntity = cb_sax_get_entity;
	sax->startDocument = cb_sax_start_document;
	sax->endDocument = cb_sax_end_document;
	sax->characters = cb_sax_characters;
	sax->cdataBlock = cb_sax_cdata;
	sax->startElement = cb_sax_start_element;
	sax->endElement = cb_sax_end_element;
	sax->comment = cb_sax_comment;
	sax->warning = cb_sax_warning;
	sax->error = cb_sax_error;
	sax->fatalError = cb_sax_fatal_error;

	ctxt = xmlCreateFileParserCtxt ("./listing/listing.xml");
	if( ctxt == NULL )
		return (-1);
	
	ctxt->sax = sax;

	ctxt->userData = (char *)user_data;
	
	xmlParseDocument (ctxt);
	
	if (ctxt->wellFormed)
		printf("Fichier bien forme\n");
	else
		printf("Fichier a chie\n");
	ctxt->sax = NULL;
	free(sax);
	xmlFreeParserCtxt (ctxt);
	return (0);
}





static int 
print_XML_listing (const char *method, const char *keyword)
{
	title_ok = 0;
	size_ok = 0;
	comment_ok = 0;
	num = 1;
	
	if (!crv_strncmp(method, "SYNC")) {
	  Sax_parse_list (NULL);
	} else
	if (!crv_strncmp(method, "LSCAT") && (keyword != NULL)) {
	  Sax_parse_list (keyword);
	} else 
	if (!crv_strncmp(method, "GET") && (keyword != NULL)) {
		download_this_on = atoi(choice_in_list);
		fprintf(stderr, "On va telecharger le fichier dont l'id est '%d'\n", download_this_on);
		Sax_parse_list (keyword);
	}

		
	return(1);
}

/* Genere la liste deroulante */

static void gen_combo_box_list(void)
{
	xmlDocPtr xmldoc = NULL;
	xmlXPathContextPtr xml_context = NULL;
	xmlXPathObjectPtr xmlobject;
	GtkTreeIter pIter;
	char *path = NULL;
	path = crv_strdup("/database/file/about/genre/text()");
	char *cat = NULL;
	int exist = -1;
	int i;
	num_genre = 0;
	genre = calloc(4096 * sizeof *genre, sizeof(char *));

	if (NULL == (xmldoc = xmlParseFile ("./listing/listing.xml"))) {
		fprintf(stderr, "%s", "create_about_file(): Err[001] xmlParseFile() failed\n");
		return;
	}
	
	xmlXPathInit();
	xml_context = xmlXPathNewContext (xmldoc);
	xmlobject = xmlXPathEval (path, xml_context);
	crv_free(path);

	if ((xmlobject->type == XPATH_NODESET) )
  {
		int j;
		xmlNodePtr node;
		for (i = 0; i < xmlobject->nodesetval->nodeNr; i++)
		{
			node = xmlobject->nodesetval->nodeTab[i];
			if ((node->type == XML_TEXT_NODE) || (node->type == XML_CDATA_SECTION_NODE))
			{
				exist = -1;
				if (num_genre == 0) {
					genre[num_genre] = crv_strdup( node->content );
					num_genre++;
				}
				for (j=0; genre[j]; j++) {
					if(!crv_strncmp(node->content, genre[j]))
						exist = 1;
				}
				if (exist == -1) {
					genre[num_genre] = strdup( node->content );
					num_genre++;
				}
			}
		}
	}

	gtk_combo_box_append_text(GTK_COMBO_BOX(ListBox), "All");
	for (i=0; genre[i]; i++)
	{
		if (!strstr(genre[i], "\n"))
			gtk_combo_box_append_text(GTK_COMBO_BOX(ListBox), genre[i]);
	}

	xmlXPathFreeObject (xmlobject);
  xmlXPathFreeContext (xml_context);
	xmlFreeDoc (xmldoc);
}


static void select_cat(GtkWidget *ListBox, gpointer data)
{
	gint i;
  i = gtk_combo_box_get_active(GTK_COMBO_BOX(data));
	//fprintf(stderr, "Choix dans la liste = %d\n", i);
	if (i == 0) {
		print_flag = 0;
		gtk_tree_store_clear(pTreeStore);
    print_XML_listing( "SYNC" , NULL);
	} else {
		//fprintf(stderr, "Nom de la categorie --> %s\n", genre[i-1]);
		print_flag = 0;
		gtk_tree_store_clear(pTreeStore);
    print_XML_listing( "LSCAT", genre[i-1] );	
	}
}

static void get_selected(GtkWidget *widget, gpointer statusbar)
{
	GtkTreeIter iter;
  GtkTreeModel *model;
  char *value;
	char *id_value;
  if (gtk_tree_selection_get_selected(
      GTK_TREE_SELECTION(widget), &model, &iter)) {
		gtk_tree_model_get(model, &iter, P, &value,  -1);
		gtk_statusbar_push(GTK_STATUSBAR(statusbar),
			gtk_statusbar_get_context_id(GTK_STATUSBAR(statusbar), value), value);

		gtk_tree_model_get(model, &iter, N, &id_value,  -1);
		if (choice_in_list != NULL) {
			g_free(choice_in_list);
			choice_in_list = strdup(id_value);
		} else choice_in_list = strdup(id_value);

		fprintf(stderr, "Choix => %s\n", value);
		g_free(value);
		g_free(id_value);
  }
}



static void sync_boutton (GtkWidget *widget, GtkTreeViewColumn *pColumn)
{
	int result = -1;
	print_flag = 0;
	char *plop=NULL;
	gtk_statusbar_push(GTK_STATUSBAR(pStatusBar),
        gtk_statusbar_get_context_id(GTK_STATUSBAR(pStatusBar), 
            "Synchronisation en cours ..."), "Synchronisation en cours ...");
	result = Sync();
	if (result == 0){
		gtk_statusbar_push(GTK_STATUSBAR(pStatusBar),
        gtk_statusbar_get_context_id(GTK_STATUSBAR(pStatusBar), 
            "Synchronisation OK."), "Synchronisation OK.");
	}

	/* Nettoyage de la liste */
	gtk_tree_store_clear(pTreeStore);
    
	/* Rempli la liste deroulante avec les categories*/
	gen_combo_box_list();

	/* Rempli la liste dans l'onglet qui va bien*/
	print_XML_listing( "SYNC", NULL );
}


static void close_tab (GtkWidget *pWidget, gpointer filename)
{
	gint page;
	page = gtk_notebook_get_current_page (pNotebook);
	gtk_notebook_remove_page (pNotebook, page);
	//gtk_notebook_insert_page(GTK_NOTEBOOK(pNotebook), pLabel1, download_tab, 1);
}

static char *num_dl;

static void Gtk_download(GtkWidget *pWidget, gpointer id)
{
	Get(num_dl);
}

static void Gtk_download1(GtkWidget *pWidget, gpointer id)
{
	char path[SIZE];
	GtkWidget *pVBox;
	GtkWidget *pLabel;
	GtkWidget *pTabLabel;
	GtkWidget *pProgress;
	GtkWidget *pButton;
	gdouble rate;

	(void)crv_strncpy(path, options.path, sizeof(path));
	(void)crv_strncat(path, "patapouf", sizeof(path));

	/* Creation Barre de progression */
	pProgress = gtk_progress_bar_new();
	gtk_progress_bar_set_orientation(GTK_PROGRESS_BAR(pProgress), GTK_PROGRESS_LEFT_TO_RIGHT);

	/* Creation bouton */
	pButton = gtk_button_new_with_label("Annuler");

	/* Creation de VBox */
	pVBox = gtk_vbox_new(TRUE, 0);

	/* Creation du nom de la tabulation */
	pLabel = gtk_label_new(num_dl);
	pTabLabel = gtk_label_new("buf");


	gtk_box_pack_start(GTK_BOX(pVBox), pButton, FALSE, FALSE, 0);

	g_signal_connect(G_OBJECT(pButton), "clicked", G_CALLBACK(close_tab), NULL);

	/* On ajoute la barre de progression a la VBox */
	gtk_box_pack_start(GTK_BOX(pVBox), pProgress, FALSE, FALSE, 0);

	/* On initialise les info textes de la barre de progression */
	gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(pProgress), 0.0);
	//gtk_progress_bar_set_text(GTK_PROGRESS_BAR(pProgress), "96% - 106 KBps");

	/* On ajoute l'onglet */
	gtk_notebook_append_page(GTK_NOTEBOOK(pNotebook), pVBox, pLabel);
	gtk_notebook_next_page( pNotebook );

	gdouble dFraction;
  gint i;
  gint iTotal = 2000;
	for(i = 0 ; i < iTotal ; ++i)
   {
      dFraction = (gdouble)i / (gdouble)iTotal;
      gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(pProgress), dFraction);
			gtk_progress_bar_set_text(GTK_PROGRESS_BAR(pProgress), g_strdup_printf("%.2f \%%", dFraction*100)); 
			gtk_main_iteration ();
   }
	 
	gtk_widget_queue_draw (GTK_WIDGET (pNotebook));
	gtk_widget_show_all(pWindow);
}




static void download (GtkWidget *pWidget, gpointer id)
{
	GtkTreeIter pIter;
	char *Id;

	if (Id == NULL)
		return;
	download_this_on = (int)strtol(Id, (char **)NULL, 10);
	fprintf(stderr, "download_this_on = %d\n", download_this_on);	
	gtk_tree_store_append(load_tree, &pIter, NULL);
	gtk_tree_store_set(load_tree, &pIter, N, "Tout va bien", P, "534 KBps", Q, (gdouble)40, -1);
	gtk_widget_show_all(pWindow);

}

static void DOwnload (GtkWidget *pWidget, gpointer id)
{
	//THREAD_TYPE Id[2];
	GtkWidget *pVBox;
	GtkWidget *pLabel;
	GtkWidget *pTabLabel;
	gdouble rate;
	char *buf = NULL;
	char *line[SIZE];
	char path[SIZE];
	FILE *fd;
	int flag = 1;


	rate = 0.7;
	buf = id;
	fprintf(stderr, "--> (%s)\n", buf);
	num_dl = crv_strdup(buf);
	(void)crv_strncpy(path, options.path, sizeof(path));
	(void)crv_strncat(path, "patapouf", sizeof(path));

	THREAD_TYPE Id;
	THREAD_CREATE(Id, (void *)Gtk_download1, buf);
	pthread_join (Id, NULL);
	/*
	num_dl = buf;
	THREAD_CREATE(Id[0], (void *)Gtk_download, num_dl);
	sleep(2);
	THREAD_CREATE(Id[1], (void *)Gtk_download1, num_dl);

	int j;
	for (j = 0; j < 2; j++)
		pthread_join (Id[j], NULL);
	*/
	crv_free(num_dl);
	
	//gtk_widget_queue_draw (GTK_WIDGET (pNotebook));
	//gtk_widget_show_all(pWindow);
}

/* Fonction appellee quand on veux des informations sur un fichier */
/* La fonction ouvre un nouvel onglet et affiche les informations */
static void valid_choice(GtkWidget *widget, GtkTreeViewColumn *pColumn)
{
	GtkWidget *pLabel1;
	GtkWidget *pLabel;
	GtkWidget *pTabLabel;
	GtkWidget *label_titre;
	GtkWidget *frame_titre;
	GtkWidget *label_taille;
	GtkWidget *frame_taille;
	GtkWidget *label_cat;
	GtkWidget *frame_comment;
	GtkWidget *label_comment;
	GtkWidget *img[3];
	GtkWidget *frame_img;
	GtkWidget *pVBox;
	GtkWidget *pScrollbar;
	GtkWidget *pButton[3];
	GtkWidget *pHBox;
	char buf[4096];

	info = NULL;
	info_title = NULL;
	info_size = NULL;
	info_cat = NULL;
	info_comment = NULL;

	char *id = NULL;
	int id_int;
	char *title = NULL;
	char *size = NULL;
	char *cat = NULL;
	char *comment = NULL;
	int flag = -1;

	if (choice_in_list == NULL)
		return;
	
	download_this_on = (int)strtol(choice_in_list, (char **)NULL, 10);
	fprintf(stderr, "download_this_on = %d\n", download_this_on);


	/* Initialisation des differents Labels */
	frame_titre = gtk_frame_new ("Nom");
	label_titre= gtk_label_new(NULL);
	frame_taille = gtk_frame_new ("Taille");
	label_taille= gtk_label_new(NULL);
	label_cat= gtk_label_new(NULL);
	frame_comment = gtk_frame_new ("Commentaire");
	label_comment= gtk_label_new(NULL);
	frame_img = gtk_frame_new ("Images");

	
	pLabel = gtk_label_new(info);

	
	/* Creation d'un VBox */
  pVBox = gtk_vbox_new(FALSE, 0);
	//g_locale_to_utf8("Téléchargement", -1, NULL, NULL, NULL);
	pButton[0] = gtk_button_new_with_label("Edit");
	pButton[1] = gtk_button_new_with_label("Annuler");
	pHBox = gtk_hbox_new(TRUE, 0);

	/*
	 *
	 *
	 *
	 *
	 */
	xmlDocPtr xmldoc = NULL;
	xmlXPathContextPtr xml_context = NULL;
	xmlXPathContextPtr xml_context_about = NULL;
	xmlXPathObjectPtr xmlobject;
	xmlXPathObjectPtr xmlobject_about;
	char *path = NULL;
	char *about_path = NULL;
	int Nb = 0;
	path = crv_strdup("/database/file/*/text()");
	about_path = 	crv_strdup("/database/file/about/*/text()");

	if (NULL == (xmldoc = xmlParseFile ("./listing/listing.xml"))) {
		fprintf(stderr, "%s", "create_about_file(): Err[001] xmlParseFile() failed\n");
		return;
	}

	
	xmlXPathInit();
	xml_context = xmlXPathNewContext (xmldoc);
	xml_context_about = xmlXPathNewContext (xmldoc);

	xmlobject = xmlXPathEval (path, xml_context);
	xmlobject_about = xmlXPathEval (about_path, xml_context_about);

	crv_free(path);


	if ((xmlobject->type == XPATH_NODESET) && (xmlobject->nodesetval))
  {
		int i;
		xmlNodePtr node;
		for (i = 0; i < xmlobject->nodesetval->nodeNr; i++)
		{
			node = xmlobject->nodesetval->nodeTab[i];
			if ((node->type == XML_TEXT_NODE) || (node->type == XML_CDATA_SECTION_NODE))
			{
				if (!crv_strncmp(node->parent->name , "title") ) {
					Nb++;
					if (Nb == download_this_on) {
						title = crv_strdup(node->content);
						pTabLabel = gtk_label_new(title);
						flag = 1;
					}
				}
				if (!crv_strncmp(node->parent->name , "size") && (flag == 1))
					size = crv_strdup(node->content);
				if (Nb != download_this_on)
					flag = -1;
			}
		}
	}

	Nb = 0;
	if ((xmlobject_about->type == XPATH_NODESET) && (xmlobject_about->nodesetval))
  {
		int i;
		xmlNodePtr node;
		for (i = 0; i < xmlobject_about->nodesetval->nodeNr; i++)
		{
			node = xmlobject_about->nodesetval->nodeTab[i];
			if ((node->type == XML_TEXT_NODE) || (node->type == XML_CDATA_SECTION_NODE))
			{
				if (!crv_strncmp(node->parent->name , "genre")) {
					Nb++;
					if (Nb == download_this_on) {
						cat = crv_strdup(node->content);
						flag = 1;
					}
				}
				if (!crv_strncmp(node->parent->name , "comment") && (flag == 1))
					comment = crv_strdup(node->content);
				if (Nb != download_this_on)
					flag = -1;
			}
		}
	}


	xmlXPathFreeObject (xmlobject);
	xmlXPathFreeObject (xmlobject_about);
  xmlXPathFreeContext (xml_context);
	xmlXPathFreeContext (xml_context_about);

	xmlFreeDoc (xmldoc);

	/*********************/
	/* Ajout du titre */
	snprintf(buf, sizeof(buf), "<span font_desc=\"Times New Roman italic 12\" foreground=\"#0000FF\">%s</span>", title);
	gtk_label_set_markup(GTK_LABEL(label_titre), buf);
	gtk_label_set_justify(GTK_LABEL(label_titre), GTK_JUSTIFY_LEFT);
	gtk_container_add (GTK_CONTAINER (frame_titre), label_titre);
	gtk_box_pack_start(GTK_BOX(pVBox), frame_titre, FALSE, FALSE, 0);
					
	/* Ajout de la taille */
	snprintf(buf, sizeof(buf), "<span font_desc=\"Times New Roman italic 12\" foreground=\"#0000FF\">%s</span>", size);
	gtk_label_set_markup(GTK_LABEL(label_taille), buf);
	gtk_label_set_justify(GTK_LABEL(label_taille), GTK_JUSTIFY_FILL);
	gtk_container_add (GTK_CONTAINER (frame_taille), label_taille);
	gtk_box_pack_start(GTK_BOX(pVBox), frame_taille, FALSE, FALSE, 0);
					
	/* Ajout de la cat */
	snprintf(buf, sizeof(buf), "Categorie : <span font_desc=\"Times New Roman italic 12\" foreground=\"#0000FF\">%s</span>", cat);
	gtk_label_set_markup(GTK_LABEL(label_cat), buf);
	gtk_label_set_justify(GTK_LABEL(label_cat), GTK_JUSTIFY_LEFT);
	gtk_box_pack_start(GTK_BOX(pVBox), label_cat, FALSE, FALSE, 0);

	/* Ajout des commentaire */
	if (comment != NULL) 
	{
		snprintf(buf, sizeof(buf), "<span font_desc=\"Times New Roman italic 10\" foreground=\"#0000FF\">%s</span>", comment);
		gtk_label_set_markup(GTK_LABEL(label_comment), buf);
		gtk_label_set_justify(GTK_LABEL(label_comment), GTK_JUSTIFY_LEFT);
		gtk_container_add (GTK_CONTAINER (frame_comment), label_comment);
		gtk_box_pack_start(GTK_BOX(pVBox), frame_comment, FALSE, FALSE, 0);
	}
	/*********************/
	/*********************/
	if (title != NULL) crv_free(title);
	if (cat != NULL) crv_free(cat);
	if (size != NULL) crv_free(size);
	if (comment != NULL) crv_free(comment);

	/*
	 *
	 *
	 *
	 */
	gtk_box_pack_start(GTK_BOX(pVBox), pHBox, FALSE, FALSE, 0);
	gtk_box_pack_start(GTK_BOX(pHBox), pButton[0], FALSE, TRUE, 0);
  gtk_box_pack_start(GTK_BOX(pHBox), pButton[1], FALSE, TRUE, 0);

	g_signal_connect(G_OBJECT(pButton[1]), "clicked", G_CALLBACK(close_tab), NULL);
	g_signal_connect(G_OBJECT(pButton[0]), "clicked", G_CALLBACK(download), choice_in_list);

	pScrollbar = gtk_scrolled_window_new(NULL, NULL);
	
	gtk_scrolled_window_add_with_viewport(GTK_CONTAINER(pScrollbar), pVBox);
	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(pScrollbar), 
		GTK_POLICY_AUTOMATIC,
		GTK_POLICY_AUTOMATIC);
	gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(pScrollbar), GTK_SHADOW_IN);
	gtk_notebook_append_page(GTK_NOTEBOOK(pNotebook), pScrollbar, pTabLabel);
	
	gtk_widget_queue_draw (GTK_WIDGET (pNotebook));
	gtk_widget_show_all(pWindow);

	if (info_title != NULL)
		crv_free(info_title);
	if (info_cat!= NULL)
		crv_free(info_cat);
	if (info_size != NULL)
		crv_free(info_size);
	if (info_comment != NULL)
		crv_free(info_comment);
	
}


/*
 * Main program for daemon.
 */
int main (int argc, char **argv)
{
  int opt;
  int result = -1;
  struct stat st; /* check options.chroot_directory */
  FILE *fd;		   /* Check *.pem files */
  char *command = NULL;
  char buf[SIZE];
  int i = 0;
  char **arg = NULL; /* Use when creuvux is run with option from command line */
  int arg_inc = 0;
  int flag_gui = 0;

  
  /* Ensure that standart files descriptor 0, 1 and 2 are open or directed to /dev/null */
  crv_sanitise_stdfd();
  
  /* Initialize configuration options to their default values. */
  initialize_client_options(&options);

 
  /* Read configuration file and set options */
  result = read_client_conf (options.config);
  if (result == -1)
    return (-1);
  
  
  /***********************/
  /* Check Configuration */
  /***********************/

  /* Check upload_directory */
  if ((stat(options.download_directory, &st) == -1) || (S_ISDIR(st.st_mode) == 0)) {
	fprintf( stderr, "Missing download directory: %s\n", options.download_directory);
	exit(1);
  }

  /* Check config directory */
  if ((stat(options.path, &st) == -1) || (S_ISDIR(st.st_mode) == 0)) {
	fprintf( stderr, "Option CREUVUX_PATH is missing: %s\n", options.path);
	exit(1);
  }

  result = crv_chdir(options.path);
  if (result == -1) {
	fprintf( stderr, "%s%s%s\n", "main(): crv_chdir(", options.path,") failed");
	exit(1);
  }

  /* Check existence of listing directory */
  if ((stat( "./listing", &st) == -1) || (S_ISDIR(st.st_mode) == 0)) {
	fprintf( stderr, "Directory %slisting/ is missing\n", options.listing_directory);
	exit(1);
  }

  /* Check existence of tmp directory */
  if ((stat( "./tmp", &st) == -1) || (S_ISDIR(st.st_mode) == 0)) {
	fprintf( stderr, "Directory %stmp/ is missing\n", options.tmp_directory);
	exit(1);
  }
  
  /* Check server.pem */
  fd = crv_fopen("client.pem", "r");
  if (fd == NULL) {
	fprintf( stderr, "%s\n", "Missing server.pem.");
	return (-1);
  }
  fclose(fd);
  
  /* Check rootcert.pem */
  fd = crv_fopen("rootcert.pem", "r");
  if (fd == NULL) {
	fprintf( stderr, "%s\n", "Missing rootcert.pem");
	return (-1);
  }
  fclose(fd);
  
  /* ignore SIGPIPE */
  signal (SIGPIPE, SIG_IGN);

	options.gui = 1;

  welcom();
  if (options.debug == 1)
  {
		fprintf(stderr, "%s\n", "#################");
		fprintf(stderr, "%s\n", "# MODE DEBUG ON #");
		fprintf(stderr, "%s\n", "#################");
		fprintf(stderr, "# | \n");
		fprintf(stderr, "# |-> CREUVUX_PATH  :'%s'\n", options.path);
		fprintf(stderr, "# |-> CREUVUX_SEC   :'%d'\n", options.sec);
		fprintf(stderr, "# |-> CREUVUX_PWD   :'%s'\n", options.passphrase);
		fprintf(stderr, "# |-> CREUVUX_DATA  :'%s'\n", options.download_directory);
		fprintf(stderr, "# |-> CREUVUX_ADDR  :'%d'\n", options.address_family);
		fprintf(stderr, "# `-> CREUVUX_GUI   :'%d'\n", options.gui);
		fprintf(stderr, "%s\n\n", "#################");
  }
	fprintf(stderr, "Welcome on gCreuvux GTK+-2.0 GUI\n");

	GtkWidget *pVBox;
	GtkWidget *Tool_HBox;
  GtkWidget *pToolbar = NULL;
	GtkWidget *pEntry;
	GtkWidget *pButton;
	GtkWidget *pScrollbar;
	GtkWidget *load_scrollbar;
	GtkWidget *Select_Button;
	GtkTreeSelection *selection;
	GtkTreeSelection *load_selection;

  GtkTreeViewColumn *pColumn = NULL;
  GtkCellRenderer *pCellRenderer;
	choice_in_list = NULL;

	gtk_init(&argc, &argv);
     
  /* Creation de la fenetre principale
	 * pWindows = principale Windows
	 */
  pWindow = gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title(GTK_WINDOW(pWindow), "gCreuvux v1.0 ");
  gtk_window_set_default_size(GTK_WINDOW(pWindow), 640, 480);
  g_signal_connect(G_OBJECT(pWindow), "destroy", G_CALLBACK(gtk_main_quit), NULL);
   
  /* Creation de la pVBox */
  pVBox = gtk_vbox_new(FALSE, 0);
	/* Ajout de la pVBox dans la fenetre */
  gtk_container_add(GTK_CONTAINER(pWindow), pVBox);
		

	/* Creation de la barre d'outils */
  pToolbar = gtk_toolbar_new();
	/* Ajout de la barre d'outil dans pVBox */
	gtk_box_pack_start(GTK_BOX(pVBox), pToolbar, FALSE, FALSE, 0);

	// Creation a partir de stock
  gtk_toolbar_insert_stock(GTK_TOOLBAR(pToolbar),
      GTK_STOCK_REFRESH,
      "Afficher liste",
      NULL,
      G_CALLBACK(sync_boutton),
      pColumn,
      -1);
	 
	// Creation a partir de stock
  gtk_toolbar_insert_stock(GTK_TOOLBAR(pToolbar),
      GTK_STOCK_ADD,
      "Telechager",
      NULL,
      G_CALLBACK(valid_choice),
      pColumn,
      -1);
	
	// Insertion d'un espace	
	 gtk_toolbar_append_space(GTK_TOOLBAR(pToolbar));

   gtk_toolbar_insert_stock(GTK_TOOLBAR(pToolbar),
      GTK_STOCK_QUIT,
      "Fermer",
      NULL,
      G_CALLBACK(gtk_main_quit),
      NULL,
      -1);

   // Modification de la taille des icones
   gtk_toolbar_set_icon_size(GTK_TOOLBAR(pToolbar), GTK_ICON_SIZE_DIALOG);

   // Affichage uniquement des icones
   gtk_toolbar_set_style(GTK_TOOLBAR(pToolbar), GTK_TOOLBAR_ICONS);


	/*************************************/
	/* Outils de recherche dans la liste */
	/*************************************/

	/* Creation de la box horizontale  qui va contenir les 
	 * options de recherche et de selection de la liste
	 */
  Tool_HBox = gtk_hbox_new(FALSE, 0);
	/* Ajout de la Tool_HBox dans la pVBox */
	gtk_box_pack_start(GTK_BOX(pVBox), Tool_HBox, FALSE, FALSE, 0);

	/* Creation de ListBox */
  ListBox = gtk_combo_box_new_text();
  /* Ajout de ListBox */
  gtk_box_pack_start(GTK_BOX(Tool_HBox), ListBox, FALSE, FALSE, 0);

	/* Ajout des elements a la liste ListBox*/
	gen_combo_box_list();
  
	/* "Activer" le premier element */
  gtk_combo_box_set_active(GTK_COMBO_BOX(ListBox), 0);

	/* Ajout d'un bouton pour vaider le choix de la categorie */
	
	/* Creation d'un bouton "ajouter" */
	Select_Button = gtk_button_new_with_label(" Valider ");
  /* Ajout du bouton dans pHBox */
  gtk_box_pack_start(GTK_BOX(Tool_HBox), Select_Button, FALSE, FALSE, 0);
	/* Connexion du signal "clicked" sur un des elements de la liste */
  g_signal_connect(G_OBJECT(Select_Button), "clicked", G_CALLBACK(select_cat), ListBox);

	/* Preparation de la zone de saisie */
	pEntry = gtk_entry_new();
	/* Insertion du GtkEntry dans la GtkVBox */
  gtk_box_pack_start(GTK_BOX(Tool_HBox), pEntry, TRUE, TRUE, 0);

  pButton = gtk_button_new_with_label(" Recherche ");
  gtk_box_pack_start(GTK_BOX(Tool_HBox), pButton, FALSE, FALSE, 0);

  /************************/
	/* Creation de la liste */
	/************************/
	/* Creation de la box horizontale  qui va contenir la liste */
  List_HBox = gtk_hbox_new(TRUE, 0);
	/* Ajout de la List_HBox dans la pVBox */
	gtk_box_pack_start(GTK_BOX(pVBox), List_HBox, TRUE, TRUE, 0);
	

	/**********************/
	/* Rajout des onglets */
	/**********************/
	
	/* Creation du GtkNotebook */
  pNotebook = gtk_notebook_new();
  
	/* Position des onglets : en haut */
  gtk_notebook_set_tab_pos(GTK_NOTEBOOK(pNotebook), GTK_POS_TOP);
	gtk_notebook_set_scrollable(GTK_NOTEBOOK(pNotebook), 1 );
	gtk_box_pack_start(GTK_BOX(List_HBox), pNotebook, TRUE, TRUE, 0);
  
	GtkWidget *pTabLabel;


	// Mise en place d'un arbre vide
  // Creation du modele
  pTreeStore = gtk_tree_store_new(N_COLUMN, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING);

  // Creation de la vue
  pTreeView = gtk_tree_view_new_with_model(GTK_TREE_MODEL(pTreeStore));

	//Widget servant a la selection dans la liste
	selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(pTreeView));

  // Creation de la premiere colonne
  pCellRenderer = gtk_cell_renderer_text_new();
  pColumn = gtk_tree_view_column_new_with_attributes("Id", pCellRenderer, "text", N, NULL);
  // Ajout de la colonne à la vue
  gtk_tree_view_append_column(GTK_TREE_VIEW(pTreeView), pColumn);

    
	// Creation de la deuxieme colonne
  pCellRenderer = gtk_cell_renderer_text_new();
  pColumn = gtk_tree_view_column_new_with_attributes("Titre", pCellRenderer, "text", P, NULL);
  // Ajout de la colonne à la vue
  gtk_tree_view_append_column(GTK_TREE_VIEW(pTreeView), pColumn);

		
	// Creation de la troisieme colonne
  pCellRenderer = gtk_cell_renderer_text_new();
  pColumn = gtk_tree_view_column_new_with_attributes("Taille", pCellRenderer, "text", Q, NULL);
  // Ajout de la colonne à la vue
  gtk_tree_view_append_column(GTK_TREE_VIEW(pTreeView), pColumn);
	
	// Ajout de la scrollbar verticale
	pScrollbar = gtk_scrolled_window_new(NULL, NULL);
	/* Ligne qui fait chier */
	gtk_container_add(GTK_CONTAINER(pScrollbar), pTreeView);
	
	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(pScrollbar), 
		GTK_POLICY_AUTOMATIC,
		GTK_POLICY_AUTOMATIC);
	gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(pScrollbar), GTK_SHADOW_IN);

	/* Creation de la tabulation de la liste */
  pTabLabel = gtk_label_new("Liste Distante");
	gtk_notebook_append_page(GTK_NOTEBOOK(pNotebook), pScrollbar, pTabLabel);

	/****************************************/
	/* creation de l'onglet Download/Upload */
	/****************************************/
	// Mise en place d'un arbre vide
  // Creation du modele
  load_tree = gtk_tree_store_new(N_COLUMN, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_DOUBLE);

  // Creation de la vue
  load_view = gtk_tree_view_new_with_model(GTK_TREE_MODEL(load_tree));

	//Widget servant a la selection dans la liste
	load_selection = gtk_tree_view_get_selection(GTK_TREE_VIEW(load_view));

  // Creation de la premiere colonne
  pCellRenderer = gtk_cell_renderer_text_new();
  pColumn = gtk_tree_view_column_new_with_attributes("Nom du fichier", pCellRenderer, "text", N, NULL);
  // Ajout de la colonne à la vue
  gtk_tree_view_append_column(GTK_TREE_VIEW(load_view), pColumn);

    
	// Creation de la deuxieme colonne
  pCellRenderer = gtk_cell_renderer_text_new();
  pColumn = gtk_tree_view_column_new_with_attributes("Rate", pCellRenderer, "text", P, NULL);
  // Ajout de la colonne à la vue
  gtk_tree_view_append_column(GTK_TREE_VIEW(load_view), pColumn);

		
	// Creation de la troisieme colonne
  pCellRenderer = gtk_cell_renderer_progress_new();
  pColumn = gtk_tree_view_column_new_with_attributes("Progression", pCellRenderer, "value", Q, NULL);
  // Ajout de la colonne à la vue
  gtk_tree_view_append_column(GTK_TREE_VIEW(load_view), pColumn);
	
	// Ajout de la scrollbar verticale
	load_scrollbar = gtk_scrolled_window_new(NULL, NULL);
	/* Ligne qui fait chier */
	gtk_container_add(GTK_CONTAINER(load_scrollbar), load_view);
	
	gtk_scrolled_window_set_policy(GTK_SCROLLED_WINDOW(load_scrollbar), 
		GTK_POLICY_AUTOMATIC,
		GTK_POLICY_AUTOMATIC);
	gtk_scrolled_window_set_shadow_type(GTK_SCROLLED_WINDOW(load_scrollbar), GTK_SHADOW_IN);

	/* Creation de la tabulation de la liste */
  pTabLabel = gtk_label_new("Download/Upload");
	gtk_notebook_append_page(GTK_NOTEBOOK(pNotebook), load_scrollbar, pTabLabel);

	
	//gtk_box_pack_start(GTK_BOX(List_HBox), pNotebook, TRUE, TRUE, 0);
	
	/****************/
	/* Barre d'etat */
	/****************/
	/* Creation de la barre d'etat */
	pStatusBar = gtk_statusbar_new();
	
	gtk_box_pack_end(GTK_BOX(pVBox), pStatusBar, FALSE, FALSE, 0);
	
	//Quand on clik sur une ligne de la liste on affiche le titre dans la barre d'etat.
	g_signal_connect(G_OBJECT(selection), "changed", G_CALLBACK(get_selected), pStatusBar);


  gtk_widget_show_all(pWindow);
  gtk_main();
	return 0;
}
